//$DEV SEVEN-SEGMENT-D 10 5 1
_SEG_BASE_	EQU	10	

ORG	1000	
FREE	RESBOX	500	
STACK_BOTTOM EQU $

ORG	2000	
FONTS_TABLE:		// Fonts	ASCII Code in Decimal
BOX	0b00111111	// 48
BOX	0b00000110	// 49
BOX	0b01011011	// 50
BOX	0b01001111	// 51
BOX	0b01100110	// 52
BOX	0b01101101	// 53
BOX	0b01111101	// 54
BOX	0b00000111	// 55
BOX	0b01111111	// 56
BOX	0b01101111	// 57
TABLE_END:			
TABLE_LENGTH	EQU	TABLE_END - FONTS_TABLE

ORG	0	
RUNTIME:			
INTOFF		
LD A, =STACK_BOTTOM
MOV SP, A
SETRTN3		
PUSH	RTN	
JMP	MAIN	
COB

BUFFER:
BOX 0
BOX 0
BOX SEG_WRITE
BOX 0
BOX 0
BOX SEG_WRITE
BOX 0
BOX 0
BOX SEG_WRITE
BOX 0
BOX 0
BOX SEG_WRITE
BOX 0
BOX 0
BOX SEG_WRITE

MMIO_BASE	BOX	U(9900)	
_SEG_DATA	EQU	0	
_SEG_ADDR	EQU	1	
_SEG_CMD	EQU	2	
_SEG_STATE	EQU	3	
_SEG_DMACMD	EQU	4	
_SEG_DMAOFF	EQU	5	
_SEG_DMASRC	EQU	6	
_SEG_DMACNT	EQU	7	
// Command for 7SEG Device
SEG_WRITE_AA	BOX	100	
SEG_LIGHT_AA	BOX	200	
SEG_OFF_AA	BOX	300	
SEG_READ_AA	BOX	400	
SEG_WRITE	BOX	981	
SEG_LIGHT	BOX	982	
SEG_READ_LIGHT	BOX	983	
SEG_READ	BOX	984	
SEG_LIGHTALL	BOX	992	
SEG_OFFALL	BOX	993	
SEG_RESET	BOX	999	
SEG_DMAWRITE	BOX	991	

MAIN:			
LD A, =5000
MOV D0, A
IN 0
CLR D1
CMP A D0
SKN
INC D1
MOV C, A

SETRTN3
PUSH RTN
JMP MAKE_BUFFER

POP	RTN	
JMP	*RTN	

MAKE_BUFFER:
LD A, #1
CMP A, D1
SKZ
JMP END_IF
MOV A, C
NEG A
MOV C, A // c에 입력값
LD A, =BUFFER
MOV B, A
LD A, =0b01000000
ST A, %0
END_IF:

CLR X
INC X
MOV D0, X 

LD A, =5
MOV D2, A

LOOP:
CMP X, D2
SKN
JMP LOOP_END

LD A, =1000
MOV D1, A


LD A, =FONTS_TABLE
MOV B, A
MOV A, C
IDIV A, D1

LD A, @A
ST A, D1

MOV X, D0
ADD X, X
ADD X, D0

LD A, =BUFFER
MOV B, A

MOV A, D1
ST A, @%0

MOV D0, A
ST A, @%1

MOV X, D0
INC X

MOV A, C
SHL A, 1
MOV C, A

JMP LOOP

LOOP_END:






LD A, D0
ST A, @%1







LD A, MMIO_BASE
ADD A, _SEG_BASE_ 
MOV B, A
LD A, SEG_LIGHTALL
ST A, %_SEG_CMD
LD A, BUFFER
ST A, %_SEG_DMASRC
LD A, =5
ST A, %_SEG_DMACNT
LD A, SEG_DMAWRITE
ST A, %_SEG_DMACMD
POP RTN
JMP *RTN